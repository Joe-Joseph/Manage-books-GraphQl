{"version":3,"sources":["queries/Queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["getBooksQuery","gql","getAuthorsQuery","addBookMutation","getBookQuery","BookDetails","book","this","props","data","name","genre","author","className","books","map","item","key","id","displayBookDetails","Component","graphql","options","variables","bookId","BookList","state","selected","loading","onClick","e","setState","displayBooks","AddBook","authorId","disabled","authors","value","preventDefault","refetchQueries","query","onSubmit","submitForm","bind","type","onChange","target","displayAuthors","compose","client","ApolloClient","uri","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61f7fb42.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\nconst getBooksQuery = gql`\n{\n    books{\n        name\n        id\n    }\n}\n`\n\nconst getAuthorsQuery = gql`\n{\n    authors{\n        name\n        id\n    }\n}\n`\n\nconst addBookMutation = gql`\n    mutation($name:String!, $genre:String!, $authorId:ID!,){\n        addBook(name:$name, genre:$genre, authorId:$authorId){\n            name\n            id\n        }\n    }\n`\n\nconst getBookQuery = gql`\n    query($id:ID){\n        book(id:$id){\n            id\n            name\n            genre\n            author{\n                id\n                name\n                age\n                books{\n                    name\n                    id\n                }\n            }\n        }\n    }\n`\n\nexport {\n    getAuthorsQuery,\n    getBooksQuery,\n    addBookMutation,\n    getBookQuery\n};","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport {getBookQuery} from '../queries/Queries';\n\nclass BookDetails extends Component {\n    displayBookDetails(){\n        const { book } = this.props.data;\n\n        if(book){\n            return(\n               <div>\n                   <h2>{ book.name }</h2>\n                   <p>{ book.genre }</p>\n                   <p>{ book.author.name }</p>\n                   <p>All books by this author:</p>\n                   <ul className=\"other-books\">\n                       {\n                           book.author.books.map(item => {\n                               return <li key={item.id}>{ item.name }</li>\n                           })\n                       }\n                   </ul>\n               </div> \n            )\n        }else{\n            return(\n                <div>No book selected....</div>\n            )\n        }\n    }\n    render() { \n        return ( \n            <div id=\"book-details\">\n                {this.displayBookDetails()}\n            </div>\n         );\n    }\n}\n \nexport default graphql(getBookQuery, {\n    options: (props) => {\n        return {\n            variables: {\n                id: props.bookId\n            }\n        }\n    }\n})(BookDetails);","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport {getBooksQuery} from '../queries/Queries'\n\n// Components\nimport BookDetails from './BookDetails'\n\nclass BookList extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            selected:null\n        }\n    }\n    displayBooks(){\n        var data = this.props.data;\n        if(data.loading){\n            return(<div>Loading books...</div>);\n        }else{\n            return data.books.map(book => {\n                return (\n                    <li key={book.id}onClick={(e) => {this.setState({selected:book.id})}}>{ book.name }</li>\n                )\n            })\n        }\n    }\n    render() { \n        return ( \n            <div id=\"main\">\n                <ul id=\"book-list\">\n                    {this.displayBooks()}\n                </ul>\n                <BookDetails bookId={this.state.selected}/>\n            </div>\n         );\n    }\n}\n \nexport default graphql(getBooksQuery)(BookList);\n","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { compose } from 'recompose';\nimport {getAuthorsQuery, addBookMutation, getBooksQuery} from '../queries/Queries'\n\nclass AddBook extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            name:'',\n            genre:'',\n            authorId:''\n        }\n    }\n    displayAuthors() {\n        var data = this.props.getAuthorsQuery;\n        if(data.loading){\n            return(\n                <option disabled>Loading authors....</option>\n            );\n        }else{\n            return data.authors.map(author => {\n                return (\n                    <option key={author.id}value={author.id}>{ author.name}</option>\n                )\n            })\n        }\n    }\n\n    submitForm(e){\n        e.preventDefault();\n        this.props.addBookMutation({\n            variables: {\n                name: this.state.name,\n                genre: this.state.genre,\n                authorId: this.state.authorId\n            },\n            refetchQueries:[{query: getBooksQuery}]\n        })\n    }\n    render() {\n        return ( \n            <form id=\"add-book\" onSubmit={this.submitForm.bind(this)}>\n                <div className=\"field\">\n                    <label>Book name:</label>\n                    <input type=\"text\" onChange={(e)=> this.setState({name: e.target.value})}/>\n                </div>\n\n                <div className=\"field\">\n                    <label>Genre:</label>\n                    <input type=\"text\" onChange={(e)=> this.setState({genre: e.target.value})}/>\n                </div>\n\n                <div className=\"field\">\n                    <label>Author:</label>\n                    <select onChange={(e)=> this.setState({authorId: e.target.value})}>\n                        <option>Select author</option>\n                        {this.displayAuthors()}\n                    </select>\n                </div>\n\n                <button>+</button>\n            </form>\n         );\n    }\n}\n \nexport default compose(\n    graphql(getAuthorsQuery, { name:\"getAuthorsQuery\" }),\n    graphql(addBookMutation, {name: \"addBookMutation\"})\n)(AddBook);\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\n//Components\nimport BookList from './components/BookList';\nimport AddBook from './components/AddBook';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\nclass App extends Component {\n  state = {  }\n  render() { \n    return (\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n          <h1>Reading List</h1>\n          <BookList/>\n          <AddBook/>\n      </div>\n      </ApolloProvider>\n     );\n  }\n}\n \nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}